一丶链式队列
#include<stdio.h>
#include<stdlib.h>
typedef struct node {
	int data;
	 node* next;
}node;//定义节点

node* createnode(int data){
	node * newnode;
	newnode = (node*)malloc(sizeof(node));
	newnode->next = NULL;
	newnode->data=data;
	return newnode;
}
typedef struct queue {
	int length;
	node* front;
	node* tail;
}queue;

queue* initqueue() {
	queue* nqueue = (queue*)malloc(sizeof(queue));
	nqueue->front = nqueue->tail = NULL;
	nqueue->length = 0;
	return nqueue;
}//初始化队列
void insert(queue* nqueue, int data) //增加数据
{
	
	node* newnode = createnode(data);
	if (nqueue->length == 0)
	{nqueue->front = nqueue->tail = newnode;
     }
	else
	{
		nqueue->tail->next = newnode;
		nqueue->tail = newnode;
	}
nqueue->length++; 
}
void deletenode(queue* nqueue)
{
	node* newnode;
	newnode = nqueue->front->next;
	free(nqueue->front);
	nqueue->front = newnode;
	nqueue->length--;

}//删除数据
void search(queue* nqueue, int num)//查找数据是否在队列中
{
	int i = 0;
	node* newnode=nqueue->front;
	while (newnode)
	{
		if (newnode->data == num)
			printf("数据%d在队列中\n",num);
		newnode = newnode->next;
		i = 1;
	}
	if(i==0)
	printf("数据%d不在队列中\n",num);

}
void print(queue* nqueue) //打印队列
{
	node* newnode = nqueue->front;
	while (newnode)
	{
		printf("%d ", newnode->data);
		newnode = newnode->next;
	}
	printf("\n");
}
void change(queue* nqueue, int num1, int num2)//修改队列中的数据
{
	int i;
	node* newnode = nqueue->front;
	if (nqueue->length >= num1)
	{
		for (i = 1; i < num1; i++)
			newnode = newnode->next;
		newnode->data = num2;
		printf("将第%d个数改为%d后的队列为\n", num1, num2);
		print(nqueue);
	}
	else
		printf("第%d个数据不存在，无法修改\n",num1);
}
int main() {
	queue* nqueue = initqueue();
	insert(nqueue,3);//增加数据
	insert(nqueue, 6);
	insert(nqueue, 5);
	insert(nqueue, 7);
	insert(nqueue, 9);
	print(nqueue);
	search(nqueue, 5);//查找
	deletenode(nqueue);//删除
	deletenode(nqueue);
	deletenode(nqueue);
	print(nqueue);
	change(nqueue, 2, 6);//改变
	change(nqueue, 8, 9);
	free(nqueue);
	return 0;
}

//二丶循环队列

#include<stdio.h>
#include<stdlib.h>
#define MAXSIZE 10
typedef struct cirqueue {
	int data[MAXSIZE];
	int front;
	int tail;
	int length;
}queue;
queue* initqueue(){
queue* cqueue = (queue*)malloc(sizeof(queue));
cqueue->front = cqueue->tail =cqueue->length = 0;
return cqueue;
}
void insert(queue* cqueue, int data)
{
	if ((cqueue->tail + 1) % MAXSIZE != cqueue->front)
	{
		cqueue->data[cqueue->tail ] = data;
		cqueue->tail = (cqueue->tail + 1) % MAXSIZE;
		cqueue->length++;
	}
	else
		printf("队列已满，无法入队\n");

}
void deldata(queue* cqueue)
{
	if (cqueue->front != cqueue->tail)
	{
		cqueue->front = (cqueue->front + 1) % MAXSIZE;
		cqueue->length--;
	}
	else
		printf("队列为空，无法出队\n");
}
void print(queue* cqueue)
{
	int i;
	for (i = 0; i < cqueue->length; i++)
		printf("%d ", cqueue->data[(cqueue->front + i) % MAXSIZE]);
	printf("\n");

}
void change(queue*cqueue,int num1,int num2) {
	if (cqueue->length >= num1)
	{
		cqueue->data[(cqueue->front + num1 - 1) % MAXSIZE] = num2;
		printf("将第%d个数改为%d后的队列为\n", num1, num2);
		print(cqueue);

	}
	else
		printf("数据不存在，无法修改\n");

}
void search(queue* cqueue, int data)
{
	int i,j=0 ;
	for (i = 0; i < cqueue->length; i++)
	{
		if (cqueue->data[i] == data)
		{
			printf("数据%d在队列中\n",data);
			j = 1;
			break;
		}
	}
	if (j == 0)
		printf("数据%d不在队列中\n",data);

}

int main()
{
	queue* cqueue = initqueue();
	insert(cqueue, 3);
	insert(cqueue, 6);
	insert(cqueue, 5);
	insert(cqueue, 4);
	insert(cqueue, 7);
	insert(cqueue, 9);
	print(cqueue);
	change(cqueue, 2, 3);
	change(cqueue, 9, 6);
	search(cqueue, 5);
	search(cqueue, 11);
	free(cqueue);
	return 0;
}
//三丶顺序队列
#include<stdio.h>
#include<stdlib.h>
#define MAXSIZE 10

typedef struct queue //顺序结构体
{
	int data[MAXSIZE],*front,*tail,length;
}queue;
//初始化顺序队列
queue* initqueue() {
	queue* nqueue = (queue*)malloc(MAXSIZE * sizeof(queue));
	nqueue->front = nqueue->tail = nqueue->data;
	nqueue->length = 0;
	return nqueue;
}
void print(queue* nqueue)//打印队列
{
	int i = nqueue->length, j;
	for (j = 0; j < nqueue->length; j++)
		printf("%d ", *(nqueue->front + j));
	printf("\n");
	nqueue->length = i;
}
void adddata(queue*nqueue,int data) //增加数据
{
	if (nqueue->length <= MAXSIZE)
	{
		*nqueue->tail = data;
		nqueue->tail++;
		nqueue->length++;
	}
	else
		printf("队列已满 ，无法输入数据\n");
}
void deledata(queue* nqueue)//删除数据
{
	if (nqueue->length)
	{
		nqueue->front++;
		nqueue->length--;
	}
	else
		printf("队列为空，无法删除\n");
}
void change(queue* nqueue, int num1, int num2)//改变数据
{
	if (num1 <= nqueue->length)
	{
		*(nqueue->front + num1 - 1) = num2;
		printf("将第%d个数改为%d后的队列为\n", num1, num2);
		print(nqueue);

	}
	else
		printf("数据不存在，无法修改\n");
}

void search(queue* nqueue, int num)//查找数据
{
	int i = 0,j=nqueue->length;
	while (j)
	{
		if (*nqueue->front + nqueue->length - 1 == num)
		{
		printf("数据%d在队列中\n", num);
			i = 1;
			break;
		}
		j--;
	}
	if (i == 0)
		printf("数据%d不在队列中\n", num);

}

int main() {
	queue* nqueue=initqueue();
	adddata(nqueue, 3);
	adddata(nqueue, 5);
	adddata(nqueue, 6);
	adddata(nqueue, 9);
	adddata(nqueue, 8);
	print(nqueue);
	deledata(nqueue);
	deledata(nqueue);
	deledata(nqueue);
	print(nqueue);
	change(nqueue, 2, 3);
	change(nqueue, 1, 2);
	change(nqueue, 9, 11);
	search(nqueue, 5);
	search(nqueue, 3);
	free(nqueue);
	return 0;
}
